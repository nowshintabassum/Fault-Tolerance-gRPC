syntax = "proto3";

option java_multiple_files = true;

package twopc;

// Existing definitions for VotingPhase, DecisionPhase, etc.

service VotingPhase {
  rpc RequestVote (VoteRequest) returns (VoteResponse);
}

message VoteRequest {
  string vote_request = 1;
}

message VoteResponse {
  bool vote_commit = 1;
}

// Service for decision phase at the participant level.
service DecisionPhase {
  rpc GlobalDecision (DecisionRequest) returns (DecisionResponse);
}

message DecisionRequest {
  bool global_commit = 1;
}

message DecisionResponse {
  string ack = 1;
}

// New service for the decision coordinator.
service DecisionCoordinatorService {
  // This RPC is invoked by the Python coordinator to hand off the decision.
  rpc startDecisionPhase (DecisionHandoffRequest) returns (DecisionHandoffResponse);
}

message DecisionHandoffRequest {
  // The global decision computed by the Python voting phase.
  bool global_commit = 1;
  // The list of participant addresses to which the decision must be disseminated.
  repeated string participant_addresses = 2;
}

message DecisionHandoffResponse {
  string message = 1;
}
