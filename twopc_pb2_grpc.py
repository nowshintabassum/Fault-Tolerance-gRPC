# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import twopc_pb2 as twopc__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in twopc_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class VotingPhaseStub(object):
    """Existing definitions for VotingPhase, DecisionPhase, etc.

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequestVote = channel.unary_unary(
                '/twopc.VotingPhase/RequestVote',
                request_serializer=twopc__pb2.VoteRequest.SerializeToString,
                response_deserializer=twopc__pb2.VoteResponse.FromString,
                _registered_method=True)


class VotingPhaseServicer(object):
    """Existing definitions for VotingPhase, DecisionPhase, etc.

    """

    def RequestVote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VotingPhaseServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RequestVote': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestVote,
                    request_deserializer=twopc__pb2.VoteRequest.FromString,
                    response_serializer=twopc__pb2.VoteResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'twopc.VotingPhase', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('twopc.VotingPhase', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class VotingPhase(object):
    """Existing definitions for VotingPhase, DecisionPhase, etc.

    """

    @staticmethod
    def RequestVote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/twopc.VotingPhase/RequestVote',
            twopc__pb2.VoteRequest.SerializeToString,
            twopc__pb2.VoteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class DecisionPhaseStub(object):
    """Service for decision phase at the participant level.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GlobalDecision = channel.unary_unary(
                '/twopc.DecisionPhase/GlobalDecision',
                request_serializer=twopc__pb2.DecisionRequest.SerializeToString,
                response_deserializer=twopc__pb2.DecisionResponse.FromString,
                _registered_method=True)


class DecisionPhaseServicer(object):
    """Service for decision phase at the participant level.
    """

    def GlobalDecision(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DecisionPhaseServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GlobalDecision': grpc.unary_unary_rpc_method_handler(
                    servicer.GlobalDecision,
                    request_deserializer=twopc__pb2.DecisionRequest.FromString,
                    response_serializer=twopc__pb2.DecisionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'twopc.DecisionPhase', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('twopc.DecisionPhase', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DecisionPhase(object):
    """Service for decision phase at the participant level.
    """

    @staticmethod
    def GlobalDecision(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/twopc.DecisionPhase/GlobalDecision',
            twopc__pb2.DecisionRequest.SerializeToString,
            twopc__pb2.DecisionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class DecisionCoordinatorServiceStub(object):
    """New service for the decision coordinator.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.startDecisionPhase = channel.unary_unary(
                '/twopc.DecisionCoordinatorService/startDecisionPhase',
                request_serializer=twopc__pb2.DecisionHandoffRequest.SerializeToString,
                response_deserializer=twopc__pb2.DecisionHandoffResponse.FromString,
                _registered_method=True)


class DecisionCoordinatorServiceServicer(object):
    """New service for the decision coordinator.
    """

    def startDecisionPhase(self, request, context):
        """This RPC is invoked by the Python coordinator to hand off the decision.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DecisionCoordinatorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'startDecisionPhase': grpc.unary_unary_rpc_method_handler(
                    servicer.startDecisionPhase,
                    request_deserializer=twopc__pb2.DecisionHandoffRequest.FromString,
                    response_serializer=twopc__pb2.DecisionHandoffResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'twopc.DecisionCoordinatorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('twopc.DecisionCoordinatorService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DecisionCoordinatorService(object):
    """New service for the decision coordinator.
    """

    @staticmethod
    def startDecisionPhase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/twopc.DecisionCoordinatorService/startDecisionPhase',
            twopc__pb2.DecisionHandoffRequest.SerializeToString,
            twopc__pb2.DecisionHandoffResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
